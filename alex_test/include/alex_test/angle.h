// Generated by gencpp from file alex_test/angle.msg
// DO NOT EDIT!


#ifndef ALEX_TEST_MESSAGE_ANGLE_H
#define ALEX_TEST_MESSAGE_ANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace alex_test
{
template <class ContainerAllocator>
struct angle_
{
  typedef angle_<ContainerAllocator> Type;

  angle_()
    : ang0(0.0)
    , ang1(0.0)
    , ang2(0.0)
    , ang3(0.0)
    , ang4(0.0)
    , ang5(0.0)  {
    }
  angle_(const ContainerAllocator& _alloc)
    : ang0(0.0)
    , ang1(0.0)
    , ang2(0.0)
    , ang3(0.0)
    , ang4(0.0)
    , ang5(0.0)  {
  (void)_alloc;
    }



   typedef double _ang0_type;
  _ang0_type ang0;

   typedef double _ang1_type;
  _ang1_type ang1;

   typedef double _ang2_type;
  _ang2_type ang2;

   typedef double _ang3_type;
  _ang3_type ang3;

   typedef double _ang4_type;
  _ang4_type ang4;

   typedef double _ang5_type;
  _ang5_type ang5;





  typedef boost::shared_ptr< ::alex_test::angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::alex_test::angle_<ContainerAllocator> const> ConstPtr;

}; // struct angle_

typedef ::alex_test::angle_<std::allocator<void> > angle;

typedef boost::shared_ptr< ::alex_test::angle > anglePtr;
typedef boost::shared_ptr< ::alex_test::angle const> angleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::alex_test::angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::alex_test::angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace alex_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'alex_test': ['/home/robit/catkin_ws/src/alex_test/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::alex_test::angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::alex_test::angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alex_test::angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::alex_test::angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alex_test::angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::alex_test::angle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::alex_test::angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04f383f4e05ca498f9db400db06098f8";
  }

  static const char* value(const ::alex_test::angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04f383f4e05ca498ULL;
  static const uint64_t static_value2 = 0xf9db400db06098f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::alex_test::angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "alex_test/angle";
  }

  static const char* value(const ::alex_test::angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::alex_test::angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 ang0\n\
float64 ang1\n\
float64 ang2\n\
float64 ang3\n\
float64 ang4\n\
float64 ang5\n\
";
  }

  static const char* value(const ::alex_test::angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::alex_test::angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ang0);
      stream.next(m.ang1);
      stream.next(m.ang2);
      stream.next(m.ang3);
      stream.next(m.ang4);
      stream.next(m.ang5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::alex_test::angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::alex_test::angle_<ContainerAllocator>& v)
  {
    s << indent << "ang0: ";
    Printer<double>::stream(s, indent + "  ", v.ang0);
    s << indent << "ang1: ";
    Printer<double>::stream(s, indent + "  ", v.ang1);
    s << indent << "ang2: ";
    Printer<double>::stream(s, indent + "  ", v.ang2);
    s << indent << "ang3: ";
    Printer<double>::stream(s, indent + "  ", v.ang3);
    s << indent << "ang4: ";
    Printer<double>::stream(s, indent + "  ", v.ang4);
    s << indent << "ang5: ";
    Printer<double>::stream(s, indent + "  ", v.ang5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALEX_TEST_MESSAGE_ANGLE_H
