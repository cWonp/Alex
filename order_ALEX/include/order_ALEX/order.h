// Generated by gencpp from file order_ALEX/order.msg
// DO NOT EDIT!


#ifndef ORDER_ALEX_MESSAGE_ORDER_H
#define ORDER_ALEX_MESSAGE_ORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace order_ALEX
{
template <class ContainerAllocator>
struct order_
{
  typedef order_<ContainerAllocator> Type;

  order_()
    : run_flag(false)
    , ent(0.0)
    , pX(0.0)
    , pY(0.0)
    , pZ(0.0)
    , rX(0.0)
    , rY(0.0)
    , rZ(0.0)
    , type(0.0)
    , toolnumber(0.0)
    , correct_init_0(0.0)
    , correct_init_1(0.0)
    , correct_init_2(0.0)
    , correct_init_3(0.0)
    , correct_init_4(0.0)
    , correct_init_5(0.0)
    , correct_init_6(0.0)
    , X_Tool_0(0.0)
    , X_Tool_1(0.0)
    , X_Tool_2(0.0)
    , X_Tool_3(0.0)
    , Y_Tool_0(0.0)
    , Y_Tool_1(0.0)
    , Y_Tool_2(0.0)
    , Y_Tool_3(0.0)
    , Z_Tool_0(0.0)
    , Z_Tool_1(0.0)
    , Z_Tool_2(0.0)
    , Z_Tool_3(0.0)  {
    }
  order_(const ContainerAllocator& _alloc)
    : run_flag(false)
    , ent(0.0)
    , pX(0.0)
    , pY(0.0)
    , pZ(0.0)
    , rX(0.0)
    , rY(0.0)
    , rZ(0.0)
    , type(0.0)
    , toolnumber(0.0)
    , correct_init_0(0.0)
    , correct_init_1(0.0)
    , correct_init_2(0.0)
    , correct_init_3(0.0)
    , correct_init_4(0.0)
    , correct_init_5(0.0)
    , correct_init_6(0.0)
    , X_Tool_0(0.0)
    , X_Tool_1(0.0)
    , X_Tool_2(0.0)
    , X_Tool_3(0.0)
    , Y_Tool_0(0.0)
    , Y_Tool_1(0.0)
    , Y_Tool_2(0.0)
    , Y_Tool_3(0.0)
    , Z_Tool_0(0.0)
    , Z_Tool_1(0.0)
    , Z_Tool_2(0.0)
    , Z_Tool_3(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _run_flag_type;
  _run_flag_type run_flag;

   typedef float _ent_type;
  _ent_type ent;

   typedef float _pX_type;
  _pX_type pX;

   typedef float _pY_type;
  _pY_type pY;

   typedef float _pZ_type;
  _pZ_type pZ;

   typedef float _rX_type;
  _rX_type rX;

   typedef float _rY_type;
  _rY_type rY;

   typedef float _rZ_type;
  _rZ_type rZ;

   typedef float _type_type;
  _type_type type;

   typedef float _toolnumber_type;
  _toolnumber_type toolnumber;

   typedef float _correct_init_0_type;
  _correct_init_0_type correct_init_0;

   typedef float _correct_init_1_type;
  _correct_init_1_type correct_init_1;

   typedef float _correct_init_2_type;
  _correct_init_2_type correct_init_2;

   typedef float _correct_init_3_type;
  _correct_init_3_type correct_init_3;

   typedef float _correct_init_4_type;
  _correct_init_4_type correct_init_4;

   typedef float _correct_init_5_type;
  _correct_init_5_type correct_init_5;

   typedef float _correct_init_6_type;
  _correct_init_6_type correct_init_6;

   typedef float _X_Tool_0_type;
  _X_Tool_0_type X_Tool_0;

   typedef float _X_Tool_1_type;
  _X_Tool_1_type X_Tool_1;

   typedef float _X_Tool_2_type;
  _X_Tool_2_type X_Tool_2;

   typedef float _X_Tool_3_type;
  _X_Tool_3_type X_Tool_3;

   typedef float _Y_Tool_0_type;
  _Y_Tool_0_type Y_Tool_0;

   typedef float _Y_Tool_1_type;
  _Y_Tool_1_type Y_Tool_1;

   typedef float _Y_Tool_2_type;
  _Y_Tool_2_type Y_Tool_2;

   typedef float _Y_Tool_3_type;
  _Y_Tool_3_type Y_Tool_3;

   typedef float _Z_Tool_0_type;
  _Z_Tool_0_type Z_Tool_0;

   typedef float _Z_Tool_1_type;
  _Z_Tool_1_type Z_Tool_1;

   typedef float _Z_Tool_2_type;
  _Z_Tool_2_type Z_Tool_2;

   typedef float _Z_Tool_3_type;
  _Z_Tool_3_type Z_Tool_3;





  typedef boost::shared_ptr< ::order_ALEX::order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::order_ALEX::order_<ContainerAllocator> const> ConstPtr;

}; // struct order_

typedef ::order_ALEX::order_<std::allocator<void> > order;

typedef boost::shared_ptr< ::order_ALEX::order > orderPtr;
typedef boost::shared_ptr< ::order_ALEX::order const> orderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::order_ALEX::order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::order_ALEX::order_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace order_ALEX

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'order_ALEX': ['/home/robit/catkin_ws/src/order_ALEX/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::order_ALEX::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::order_ALEX::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_ALEX::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_ALEX::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_ALEX::order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_ALEX::order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::order_ALEX::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58d8f9de45e088e9e8757fb01c864e42";
  }

  static const char* value(const ::order_ALEX::order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58d8f9de45e088e9ULL;
  static const uint64_t static_value2 = 0xe8757fb01c864e42ULL;
};

template<class ContainerAllocator>
struct DataType< ::order_ALEX::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "order_ALEX/order";
  }

  static const char* value(const ::order_ALEX::order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::order_ALEX::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool run_flag\n\
float32 ent\n\
float32 pX\n\
float32 pY\n\
float32 pZ\n\
float32 rX\n\
float32 rY\n\
float32 rZ\n\
float32 type\n\
float32 toolnumber\n\
float32 correct_init_0\n\
float32 correct_init_1\n\
float32 correct_init_2\n\
float32 correct_init_3\n\
float32 correct_init_4\n\
float32 correct_init_5\n\
float32 correct_init_6\n\
float32 X_Tool_0\n\
float32 X_Tool_1\n\
float32 X_Tool_2\n\
float32 X_Tool_3\n\
float32 Y_Tool_0\n\
float32 Y_Tool_1\n\
float32 Y_Tool_2\n\
float32 Y_Tool_3\n\
float32 Z_Tool_0\n\
float32 Z_Tool_1\n\
float32 Z_Tool_2\n\
float32 Z_Tool_3\n\
\n\
\n\
";
  }

  static const char* value(const ::order_ALEX::order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::order_ALEX::order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.run_flag);
      stream.next(m.ent);
      stream.next(m.pX);
      stream.next(m.pY);
      stream.next(m.pZ);
      stream.next(m.rX);
      stream.next(m.rY);
      stream.next(m.rZ);
      stream.next(m.type);
      stream.next(m.toolnumber);
      stream.next(m.correct_init_0);
      stream.next(m.correct_init_1);
      stream.next(m.correct_init_2);
      stream.next(m.correct_init_3);
      stream.next(m.correct_init_4);
      stream.next(m.correct_init_5);
      stream.next(m.correct_init_6);
      stream.next(m.X_Tool_0);
      stream.next(m.X_Tool_1);
      stream.next(m.X_Tool_2);
      stream.next(m.X_Tool_3);
      stream.next(m.Y_Tool_0);
      stream.next(m.Y_Tool_1);
      stream.next(m.Y_Tool_2);
      stream.next(m.Y_Tool_3);
      stream.next(m.Z_Tool_0);
      stream.next(m.Z_Tool_1);
      stream.next(m.Z_Tool_2);
      stream.next(m.Z_Tool_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::order_ALEX::order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::order_ALEX::order_<ContainerAllocator>& v)
  {
    s << indent << "run_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run_flag);
    s << indent << "ent: ";
    Printer<float>::stream(s, indent + "  ", v.ent);
    s << indent << "pX: ";
    Printer<float>::stream(s, indent + "  ", v.pX);
    s << indent << "pY: ";
    Printer<float>::stream(s, indent + "  ", v.pY);
    s << indent << "pZ: ";
    Printer<float>::stream(s, indent + "  ", v.pZ);
    s << indent << "rX: ";
    Printer<float>::stream(s, indent + "  ", v.rX);
    s << indent << "rY: ";
    Printer<float>::stream(s, indent + "  ", v.rY);
    s << indent << "rZ: ";
    Printer<float>::stream(s, indent + "  ", v.rZ);
    s << indent << "type: ";
    Printer<float>::stream(s, indent + "  ", v.type);
    s << indent << "toolnumber: ";
    Printer<float>::stream(s, indent + "  ", v.toolnumber);
    s << indent << "correct_init_0: ";
    Printer<float>::stream(s, indent + "  ", v.correct_init_0);
    s << indent << "correct_init_1: ";
    Printer<float>::stream(s, indent + "  ", v.correct_init_1);
    s << indent << "correct_init_2: ";
    Printer<float>::stream(s, indent + "  ", v.correct_init_2);
    s << indent << "correct_init_3: ";
    Printer<float>::stream(s, indent + "  ", v.correct_init_3);
    s << indent << "correct_init_4: ";
    Printer<float>::stream(s, indent + "  ", v.correct_init_4);
    s << indent << "correct_init_5: ";
    Printer<float>::stream(s, indent + "  ", v.correct_init_5);
    s << indent << "correct_init_6: ";
    Printer<float>::stream(s, indent + "  ", v.correct_init_6);
    s << indent << "X_Tool_0: ";
    Printer<float>::stream(s, indent + "  ", v.X_Tool_0);
    s << indent << "X_Tool_1: ";
    Printer<float>::stream(s, indent + "  ", v.X_Tool_1);
    s << indent << "X_Tool_2: ";
    Printer<float>::stream(s, indent + "  ", v.X_Tool_2);
    s << indent << "X_Tool_3: ";
    Printer<float>::stream(s, indent + "  ", v.X_Tool_3);
    s << indent << "Y_Tool_0: ";
    Printer<float>::stream(s, indent + "  ", v.Y_Tool_0);
    s << indent << "Y_Tool_1: ";
    Printer<float>::stream(s, indent + "  ", v.Y_Tool_1);
    s << indent << "Y_Tool_2: ";
    Printer<float>::stream(s, indent + "  ", v.Y_Tool_2);
    s << indent << "Y_Tool_3: ";
    Printer<float>::stream(s, indent + "  ", v.Y_Tool_3);
    s << indent << "Z_Tool_0: ";
    Printer<float>::stream(s, indent + "  ", v.Z_Tool_0);
    s << indent << "Z_Tool_1: ";
    Printer<float>::stream(s, indent + "  ", v.Z_Tool_1);
    s << indent << "Z_Tool_2: ";
    Printer<float>::stream(s, indent + "  ", v.Z_Tool_2);
    s << indent << "Z_Tool_3: ";
    Printer<float>::stream(s, indent + "  ", v.Z_Tool_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORDER_ALEX_MESSAGE_ORDER_H
